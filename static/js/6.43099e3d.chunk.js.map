{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/CharSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.jpg","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharlist","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","useMarvelServices","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","Helmet","decoration","display","width","height","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/6.43099e3d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nimport useMarvelService from '../../services/MarvelService'\n\n\n\n\nconst RandomChar = () => {\n\n\tconst [char, setChar] = useState(null)\n\t\n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar()\n\t},[])\n\n\t\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char)\n\t}\n\n\t\n\n\tconst updateChar = () => {\n\t\tclearError()\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\t\tgetCharacter(id)\n\t\t.then(onCharLoaded)\n\t}\n\n\t\n    \n\t\t const errorMessage = error ? <ErrorMessage/> : null;\n\t\t const spinner = loading ? <Spinner/> : null;\n\t\t const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n\n\t\t return (\n\t\t\t <div className=\"randomchar\">\n\t\t\t\t {errorMessage}\n\t\t\t\t {spinner}\n\t\t\t\t {content}\n\t\t\t\t <div className=\"randomchar__static\">\n\t\t\t\t\t <p className=\"randomchar__title\">\n\t\t\t\t\t\t Random character for today!<br />\n\t\t\t\t\t\t Do you want to get to know him better?\n\t\t\t\t\t </p>\n\t\t\t\t\t <p className=\"randomchar__title\">\n\t\t\t\t\t\t Or choose another one\n\t\t\t\t\t </p>\n\t\t\t\t\t <button className=\"button button__main\">\n\t\t\t\t\t\t <div className=\"inner\" onClick={updateChar}>try it</div>\n\t\t\t\t\t </button>\n\t\t\t\t\t <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n\t\t\t\t </div>\n\t\t\t </div>\n\t\t )\n\t \n}\n\nconst View = ({char}) => {\n\tconst {name, description, thumbnail, homepage, wiki} = char;\n\tlet imgStyle = { 'objectFit': 'cover' };\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = { 'objectFit': 'unset' }\n\t}\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">\n\t\t\t\t\t{description}\n\t\t\t\t</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default RandomChar;\n\n\n\n\n\n\n\n// import { useState, useEffect} from 'react/cjs/react.production.min';\n// import Spinner from '../spinner/spinner';\n// import ErrorMessage from '../errorMessage/errorMessage';\n// import './randomChar.scss';\n// import mjolnir from '../../resources/img/mjolnir.png';\n\n// import MarvelService from '../../services/MarvelService'\n\n\n\n\n// const RandomChar = () => {\n\n// \tconst [char, setChar] = useState({})\n// \tconst [loading, setLoading] = useState(true)\n// \tconst [error, setError] = useState(false)\n\n\t\n// \tconst marvelService = new MarvelService();\n\t\n// \tconst onCharLoaded = (char) => {\n// \t\tsetChar(char);\n// \t\tsetLoading(false)\n// \t}\n\n// \tconst onCharLoading = () => {\n// \t\tsetLoading(true)\n// \t}\n\n// \tconst onError = () => {\n// \t\tsetLoading(false)\n// \t\tsetError(true)\n// \t}\n\t\n\n// \tconst updateChar = () => {\n// \t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n// \t\tonCharLoading();\n// \t\tmarvelService\n// \t\t.getCharacter(id)\n// \t\t.then(onCharLoaded)\n// \t\t.catch(onError);\n// \t}\n\n\t\n\n\n// \tuseEffect(() => {\n// \t\tupdateChar()\n// \t},[])\n\n\n\t\n// \t\t const errorMessage = error ? <ErrorMessage/> : null;\n// \t\t const spinner = loading ? <Spinner/> : null;\n// \t\t const content = !(loading || error) ? <View char={char}/> : null;\n\n\n// \t\t return (\n// \t\t\t <div className=\"randomchar\">\n// \t\t\t\t {errorMessage}\n// \t\t\t\t {spinner}\n// \t\t\t\t {content}\n// \t\t\t\t <div className=\"randomchar__static\">\n// \t\t\t\t\t <p className=\"randomchar__title\">\n// \t\t\t\t\t\t Random character for today!<br />\n// \t\t\t\t\t\t Do you want to get to know him better?\n// \t\t\t\t\t </p>\n// \t\t\t\t\t <p className=\"randomchar__title\">\n// \t\t\t\t\t\t Or choose another one\n// \t\t\t\t\t </p>\n// \t\t\t\t\t <button className=\"button button__main\">\n// \t\t\t\t\t\t <div className=\"inner\" onClick={updateChar}>try it</div>\n// \t\t\t\t\t </button>\n// \t\t\t\t\t <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n// \t\t\t\t </div>\n// \t\t\t </div>\n// \t\t )\n\n// }\n\n// const View = ({char}) => {\n// \tconst {name, description, thumbnail, homepage, wiki} = char;\n// \tlet imgStyle = { 'objectFit': 'cover' };\n// \tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n// \t\timgStyle = { 'objectFit': 'unset' }\n// \t}\n// \treturn (\n// \t\t<div className=\"randomchar__block\">\n// \t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n// \t\t\t<div className=\"randomchar__info\">\n// \t\t\t\t<p className=\"randomchar__name\">{name}</p>\n// \t\t\t\t<p className=\"randomchar__descr\">\n// \t\t\t\t\t{description}\n// \t\t\t\t</p>\n// \t\t\t\t<div className=\"randomchar__btns\">\n// \t\t\t\t\t<a href={homepage} className=\"button button__main\">\n// \t\t\t\t\t\t<div className=\"inner\">homepage</div>\n// \t\t\t\t\t</a>\n// \t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n// \t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n// \t\t\t\t\t</a>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n\n// export default RandomChar;\n","import { useState, useEffect, useRef } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelServices from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n\n\tconst [charList, setCharlist] = useState([])\n\tconst [newItemLoading, setNewItemLoading] = useState(false)\n\tconst [offset, setOffset] = useState(210)\n\tconst [charEnded, setCharEnded] = useState(false)\n\n\n\n\tconst {loading, error, getAllCharacters} = useMarvelServices();\n\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, [])\n\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true);\t\n\t\tgetAllCharacters(offset)\n      .then(onCharListLoaded)\n\t}\n\n\n\tconst onCharListLoaded = (newCharList) => {\n\t\tlet ended = false;\n\t\tif(newCharList.length < 9) {\n\t\t\tended = true;\n\t\t}\n\n\t \tsetCharlist(charList => [...charList, ...newCharList])\n\t\tsetNewItemLoading(newItemLoading => false)\n\t\tsetOffset(offset => offset + 9)\n\t\tsetCharEnded(charEnded => ended)\n\n\t}\n\n\n\tconst itemRefs =useRef([]);\n\n\tconst focusOnItem = (id) => {\n\t\titemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n\t\titemRefs.current[id].classList.add('char__item_selected');\n\t\titemRefs.current[id].focus()\n\t}\n\n\n\tfunction renderItems(arr) {\n\t\tconst items = arr.map((item, i) => {\n\t\t\tlet imgStyle = {'objectFit' : 'cover'};\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\timgStyle = { 'objectFit': 'unset' }\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<li\n\t\t\t\t\tclassName='char__item'\n\t\t\t\t\ttabIndex={0}\n\t\t\t\t\tref={el => itemRefs.current[i] = el}\n\t\t\t\t\tkey={item.id}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tprops.onCharSelected(item.id)\n\t\t\t\t\t\tfocusOnItem(i)\n\t\t\t\t\t}}\n\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\tif (e.key === ' ' || e.key === 'Enter') {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id)\n\t\t\t\t\t\t\tfocusOnItem(i)\n\t\t\t\t\t\t}\n\t\t\t\t\t}}>\n\t\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n\t\t\t\t\t\t<div className='char__name'>{item.name}</div>\n\t\t\t\t</li>\n\t\t\t)\n\n\t\t})\n\n\t\treturn (\n\t\t\t<ul className='char__grid'>\n\t\t\t\t{items}\n\t\t\t</ul>\n\t\t)\n\t}\n\n\n\tconst items = renderItems(charList);\n\n\tconst errorMessage = error ? <ErrorMessage/> : null;\n\tconst spinner = loading && !newItemLoading ? <Spinner/> : null;\n\t\n\t\treturn (\n        <div className=\"char__list\">\n            {errorMessage}\n\t\t\t\t{spinner}\n\t\t\t\t{items}\n            <button \n\t\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\t\tdisabled={newItemLoading}\n\t\t\t\t\tstyle={{'display': charEnded ? 'none' : 'block'}}\n\t\t\t\t\tonClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n\n\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nimport useMarvelService from '../../services/MarvelService';\n\n\nconst CharInfo = (props) => {\n\n\tconst [char, setChar] = useState(null)\n\n\n\n\tconst {loading, error, getCharacter, clearError} = useMarvelService();\n\n\n\tuseEffect(() => {\n\t\tupdateChar()\n\t},[props.charId])\n\n\t\n\n\tconst updateChar = () => {\n\t\tconst {charId} = props;\n\t\tif (!charId) {\n\t\t\treturn;\n\t\t}\n\t\tclearError()\n\t\tgetCharacter(charId)\n\t\t\t.then(onCharLoaded)\n\t}\n\n\tconst onCharLoaded = (char) => {\n\t\t\tsetChar(char);\n\t}\n\n\n\n\n\t\tconst skeleton = char || loading || error ? null : <Skeleton/> \n\n\t\t const errorMessage = error ? <ErrorMessage /> : null;\n\t\t const spinner = loading ? <Spinner /> : null;\n\t\t const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n\n\n\t\t return (\n\t\t\t <div className=\"char__info\">\n\t\t\t\t{skeleton}\n\t\t\t\t{errorMessage}\n\t\t\t\t{spinner}\n\t\t\t\t{content}\n\t\t\t </div>\n\t\t )\n\t \n}\n\n\n\nconst View = ({char}) => {\n\tconst {name, description, thumbnail, homepage, wiki, comics} = char;\n\n\tlet imgStyle = { 'objectFit': 'cover' };\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = { 'objectFit': 'unset' }\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"char__basics\">\n\t\t\t\t<img src={thumbnail} alt={name} style={imgStyle}/>\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"char__info-name\">{name}</div>\n\t\t\t\t\t<div className=\"char__btns\">\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"char__descr\">\n\t\t\t\t{description}\n\t\t\t</div>\n\t\t\t<div className=\"char__comics\">Comics:</div>\n\t\t\t<ul className=\"char__comics-list\">\n\t\t\t\t{comics.length > 0 ? null : 'Thehe is no comics with this character'}\n\t\t\t\t{\n\t\t\t\t\tcomics.map((item, i) => {\n\t\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\t\tif (i > 9) return;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={i} className=\"char__comics-item\">\n\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t</ul>\n\t\t</>\n\t)\n}\n\nCharInfo.propTypes = {\n\tcharId: PropTypes.number\n}\n\nexport default CharInfo;\n\n","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import {Component} from \"react\"\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo);\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.error) {\r\n\t\t\treturn <ErrorMessage/>\r\n\t\t}\r\n\t\t\r\n\t\treturn this.props.children;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundary","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport {Helmet} from \"react-helmet\"\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../CharSearchForm/CharSearchForm\"\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <meta \r\n\t\t\t \tname=\"description\" \r\n\t\t\t \tcontent=\"Marvel information portal\" \r\n\t\t\t\t />\r\n          <title>Marvel information portal</title>\r\n        </Helmet>\r\n        <ErrorBoundary>\r\n          <RandomChar />\r\n        </ErrorBoundary>\r\n        <div className=\"char__content\">\r\n          <ErrorBoundary>\r\n            <CharList onCharSelected={onCharSelected} />\r\n          </ErrorBoundary>\r\n          <div>\r\n            <ErrorBoundary>\r\n              <CharInfo charId={selectedChar} />\r\n            </ErrorBoundary>\r\n            <ErrorBoundary>\r\n              <CharSearchForm />\r\n            </ErrorBoundary>\r\n          </div>\r\n        </div>\r\n        <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n      </>\r\n    );\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.244c2c83.jpg\";","import img from './error.jpg'\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{display: 'block', width: '550px', height: '260px'}} src={img} alt=\"error\"/>\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook'\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n\tconst {loading, request, error, clearError} = useHttp()\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiKey = 'apikey=d0d6f6b551f1bf8934bcf1acd45c9974';\r\n\tlet _baseOffset = 210;\r\n\t\r\n\r\n\t\r\nconst getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n\t\tsetLoading(true)\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, {method, body, headers})\r\n\r\n\t\t\tif (!response.ok) {\r\n        throw new Error(`could not fetch ${url}, status ${response.status}`);\r\n      }\r\n\r\n\t\t\tconst data = await response.json()\r\n\r\n\t\t\tsetLoading(false)\r\n\r\n\t\t\treturn data\r\n\r\n\r\n\t\t} catch(e) {\r\n\t\t\tsetLoading(false)\r\n\t\t\tsetError(e.message)\r\n\t\t\tconsole.log(e.message);\r\n\t\t\tthrow e\r\n\t\t}\r\n\r\n\t},[])\r\n\r\n\r\n\tconst clearError = useCallback(() => setError(null), [])\r\n\r\n\treturn {loading, request, error, clearError}\r\n\r\n}"],"sourceRoot":""}